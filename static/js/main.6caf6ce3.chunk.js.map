{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","types/SelectFilter.ts","components/TodoModal/TodoModal.tsx","utils/function.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","selectedTodo","setSelectedTodo","className","map","todo","classNames","id","completed","title","type","onClick","TodoFilter","query","onChangedQuery","resetQuery","selectFilter","setSelectFilter","value","onChange","event","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","SelectFilter","TodoModal","React","memo","useState","currentUser","setCurrentUser","hasError","setHasError","useEffect","fetchUser","a","userId","userFromServer","href","email","name","App","todosToUse","setTodosToUse","setQuery","All","isLoading","setIsLoading","fetchTodos","todosFromServer","filterTodos","useMemo","filter","filteredByQuery","toLowerCase","includes","Active","Completed","filteredTodos","useCallback","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6caf6ce3.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n  selectedTodo: Todo | null,\n  setSelectedTodo: (value: Todo | null) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  setSelectedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <tr\n          data-cy=\"todo\"\n          className={classNames({\n            'has-background-info-light': selectedTodo?.id === todo.id,\n          })}\n          key={todo.id}\n        >\n          <td className=\"is-vcentered\">{todo.id}</td>\n          {todo.completed\n            ? (\n              <td className=\"is-vcentered\">\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </td>\n            ) : (\n              <td className=\"is-vcentered\" />\n            )}\n          <td className=\"is-vcentered is-expanded\">\n            <p\n              className={classNames({\n                'has-text-success': todo.completed,\n                'has-text-danger': !todo.completed,\n              })}\n            >\n              {todo.title}\n            </p>\n          </td>\n          <td className=\"has-text-right is-vcentered\">\n            <button\n              data-cy=\"selectButton\"\n              className=\"button\"\n              type=\"button\"\n              onClick={() => setSelectedTodo(todo)}\n            >\n              <span className=\"icon\">\n                <i className={classNames('far', {\n                  'fa-eye': selectedTodo?.id !== todo.id,\n                  'fa-eye-slash': selectedTodo?.id === todo.id,\n                })}\n                />\n              </span>\n            </button>\n          </td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { SelectFilter } from '../../types/SelectFilter';\n\ntype Props = {\n  query: string,\n  onChangedQuery: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  resetQuery: () => void;\n  selectFilter: SelectFilter;\n  setSelectFilter: (selectFilter: SelectFilter) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  query,\n  onChangedQuery,\n  resetQuery,\n  selectFilter,\n  setSelectFilter,\n}) => {\n  const handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    setSelectFilter(value as SelectFilter);\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectFilter}\n            onChange={handleSelect}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={onChangedQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={resetQuery}\n              aria-label=\"Clear\"\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export const enum SelectFilter {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\n\ntype Props = {\n  selectedTodo: Todo;\n  setSelectedTodo: (value: Todo | null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = React.memo(({\n  selectedTodo,\n  setSelectedTodo,\n}) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const userFromServer = await getUser(selectedTodo.userId);\n\n        setCurrentUser(userFromServer);\n      } catch (error) {\n        setHasError(true);\n      }\n    };\n\n    fetchUser();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!currentUser ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${selectedTodo.id}`}\n            </div>\n\n            <button\n              aria-label=\"Close modal\"\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setSelectedTodo(null);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {selectedTodo.title}\n            </p>\n\n            {hasError\n              ? <span>No user on server</span>\n              : (\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {selectedTodo.completed\n                    ? <strong className=\"has-text-success\">Done</strong>\n                    : <strong className=\"has-text-danger\">Planned</strong>}\n\n                  {' by '}\n\n                  <a href={`mailto:${currentUser.email}`}>\n                    {currentUser.name}\n                  </a>\n                </p>\n              )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n","import { SelectFilter } from '../types/SelectFilter';\nimport { Todo } from '../types/Todo';\n\nexport const filteredTodos = (\n  todosToUse: Todo[], selectFilter: string, query: string,\n) => {\n  return todosToUse.filter((todo) => {\n    const filteredByQuery = todo.title\n      .toLowerCase()\n      .includes(query.toLowerCase());\n\n    switch (selectFilter) {\n      case SelectFilter.Active:\n        return !todo.completed && filteredByQuery;\n\n      case SelectFilter.Completed:\n        return todo.completed && filteredByQuery;\n\n      case SelectFilter.All:\n      default:\n        return filteredByQuery;\n    }\n  });\n};\n","/* eslint-disable max-len */\nimport React, {\n  useState, useEffect, useCallback, useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './types/Todo';\nimport { getTodos } from './api';\nimport { filteredTodos } from './utils/function';\nimport { SelectFilter } from './types/SelectFilter';\n\nexport const App: React.FC = () => {\n  const [todosToUse, setTodosToUse] = useState<Todo[]>([]);\n  const [query, setQuery] = useState('');\n  const [selectFilter, setSelectFilter] = useState<SelectFilter>(SelectFilter.All);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const todosFromServer = await getTodos();\n\n        setIsLoading(false);\n        setTodosToUse(todosFromServer);\n      } catch (error) {\n        setHasError(true);\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const filterTodos = useMemo(() => {\n    return filteredTodos(todosToUse, selectFilter, query);\n  }, [todosToUse, selectFilter, query]);\n\n  const onChangedQuery = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      setQuery(event.target.value);\n    }, [],\n  );\n\n  const resetQuery = useCallback(() => {\n    setQuery('');\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                query={query}\n                onChangedQuery={onChangedQuery}\n                resetQuery={resetQuery}\n                selectFilter={selectFilter}\n                setSelectFilter={setSelectFilter}\n              />\n            </div>\n\n            {hasError\n              ? <span>No todos from server</span>\n              : (\n                <div className=\"block\">\n                  {isLoading\n                    ? <Loader />\n                    : (\n                      <TodoList\n                        todos={filterTodos}\n                        selectedTodo={selectedTodo}\n                        setSelectedTodo={setSelectedTodo}\n                      />\n                    )}\n                </div>\n              )}\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          setSelectedTodo={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}